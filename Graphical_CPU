package com.example.graphical_cpu;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;

class Process {
    int id;
    int burstTime;
    int arrivalTime;
    int priority;
    int remainingTime;
    int waitingTime;
    int turnaroundTime;
    int quantum;
    double fcaiFactor;

    Process(int id, int arrivalTime, int burstTime, int priority , int quantum) {
        this.id = id;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
        this.remainingTime = burstTime;
        this.quantum = quantum;
        this.waitingTime = 0;
        this.turnaroundTime = 0;
        this.fcaiFactor = 0.0;
    }
}


public class Main extends Application {
    static Scanner input = new Scanner(System.in);
    // data for processes and scheduling
    public static List<Process> processes = new ArrayList<>();
    public static List<String> executionOrder;
    public static float averageWaitingTime;
    public static float averageTurnaroundTime;
    public static List<Integer> switchTime = new ArrayList<>();  // for SRTF , fcai

    @Override
    public void start(Stage primaryStage) {

        try {
            // main layout
            BorderPane root = new BorderPane();

            // create a canvas for the Gantt chart
            Canvas canvas = new Canvas(800, 400);
            GraphicsContext gc = canvas.getGraphicsContext2D();
            drawGanttChart(gc);

            // add process information and statistics
            GridPane processInfo = createProcessInfo();
            Label stats = createStatistics();

            // add components to layout
            root.setTop(canvas);
            root.setRight(processInfo);
            root.setBottom(stats);

            // set scene
            Scene scene = new Scene(root, 1000, 600);
            primaryStage.setScene(scene);
            primaryStage.setTitle("CPU Scheduling Graph");
            primaryStage.show();
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Error during application startup: " + e.getMessage());
            Platform.exit(); // exit the application
        }
    }

    private void drawGanttChart(GraphicsContext gc) {
        if (executionOrder == null || executionOrder.isEmpty()) {
            gc.fillText("No data available to draw the Gantt chart.", 10, 50);
            return;
        }

        double x = 50; // starting X position for Gantt bars
        double y = 50; // Y position
        double barHeight = 50; // height of each bar
        double unitWidth = 20; // width of each time unit


        int i = -1;
        // loop through the execution order to draw the Gantt chart
        for (String processId : executionOrder) {

            // create the process object dynamically using the ID from the execution order
            Process process = findProcessById(Integer.parseInt(processId.substring(1)));
            if (process != null) {
                if(executionOrder.size() == processes.size()){
                    // set color dynamically
                    gc.setFill(getColorForProcess(process.id));
                    gc.fillRect(x, y, unitWidth * process.burstTime, barHeight);

                    // add process label
                    gc.setFill(Color.BLACK);
                    gc.fillText(processId, x + 5, y + 30);

                    // update X for next process
                    x += unitWidth * process.burstTime;
                }
                else{
                    ++i;

                    int updatedValue = switchTime.getFirst();
                    if(i != 0) {
                        updatedValue = switchTime.get(i) - switchTime.get(i - 1); // calculate the new value
                    }

                    // set color dynamically
                    gc.setFill(getColorForProcess(process.id));
                    gc.fillRect(x, y, unitWidth * updatedValue, barHeight);

                    // add process label
                    gc.setFill(Color.BLACK);
                    gc.fillText(processId, x + 5, y + 30);

                    // update X for next process
                    x += unitWidth * updatedValue;
                }
            }
        }

        // draw time markers
        gc.setFill(Color.BLACK);
        double time = 0;
        x = 50;
        i = -1;
        for (String processId : executionOrder) {
            Process process = findProcessById(Integer.parseInt(processId.substring(1)));

            if (process != null) {
                if (executionOrder.size() == processes.size()){
                    // draw the current time marker
                    gc.fillText(String.valueOf((int) time), x, y + barHeight + 20);

                    // update time and x-position for the next marker
                    time += process.burstTime;
                    x += unitWidth * process.burstTime;
                }
                else{
                    ++i;
                    int updatedValue = switchTime.get(0);
                    if(i != 0) {
                        updatedValue = switchTime.get(i) - switchTime.get(i - 1); // calculate the new value
                    }

                    // draw the current time marker
                    gc.fillText(String.valueOf((int) time), x, y + barHeight + 20);

                    // update time and x-position for the next marker
                    time += updatedValue;
                    x += unitWidth * updatedValue;
                }

            }
        }

        // add the final time marker
        gc.fillText(String.valueOf((int) time), x, y + barHeight + 20);

    }

    private Process findProcessById(int id) {
        // Find the process in the original processes list using the process ID
        for (Process p : processes) {
            if (p.id == id) {
                return p;
            }
        }
        return null;
    }

    private GridPane createProcessInfo() {
        GridPane grid = new GridPane();
        grid.setVgap(10);
        grid.setHgap(10);

        Label header = new Label("Processes Information");
        header.setStyle("-fx-font-size: 16px; -fx-font-weight: bold; -fx-text-fill: red;");
        grid.add(header, 0, 0, 2, 1);

        // Column headers
        grid.add(new Label("Process"), 0, 1);
        grid.add(new Label("Color"), 1, 1);

        // Add processes information
        for (int i = 0; i < processes.size(); i++) {
            Process process = processes.get(i);

            // Process ID
            Label processId = new Label("P" + process.id);
            grid.add(processId, 0, i + 2);

            // Process color
            Canvas colorBox = new Canvas(20, 20);
            GraphicsContext gc = colorBox.getGraphicsContext2D();
            gc.setFill(getColorForProcess(process.id));
            gc.fillRect(0, 0, 20, 20);
            grid.add(colorBox, 1, i + 2);
        }

        return grid;
    }

    private Label createStatistics() {
        String statsText = "Statistics\n" +
                "Average Waiting Time (AWT): " + averageWaitingTime + "\n" +
                "Average Turnaround Time (ATA): " + averageTurnaroundTime;

        Label stats = new Label(statsText);
        stats.setStyle("-fx-font-size: 14px; -fx-text-fill: red;");
        return stats;
    }

    private Color getColorForProcess(int processId) {
        // Assign colors based on process ID
        switch (processId % 6) {
            case 0: return Color.YELLOW;
            case 1: return Color.CYAN;
            case 2: return Color.MAGENTA;
            case 3: return Color.ORANGE;
            case 4: return Color.LIME;
            default: return Color.PINK;
        }
    }

    public static List<Process> inputProcesses(String filePath) {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line = br.readLine(); // Skip the header line
            while ((line = br.readLine()) != null) {
                String[] parts = line.split("\\s+"); // Split by whitespace
                int id = Integer.parseInt(parts[0]); // PID
                int arrivalTime = Integer.parseInt(parts[1]); // Arrival Time
                int burstTime = Integer.parseInt(parts[2]); // Burst Time
                int priority = Integer.parseInt(parts[3]); // Priority
                int quantum = Integer.parseInt(parts[4]); // Quantum
                processes.add(new Process(id, arrivalTime, burstTime, priority, quantum));
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        return processes;
    }


    public static void main(String[] args) {

        String filePath = "src/main/java/com/example/graphical_cpu/input.txt"; // Specify the file path
        List<Process> processes;
        int agingFactor;
        System.out.println("Choose scheduling algorithm:");
        System.out.println("1. Non-Preemptive SJF");
        System.out.println("2. Preemptive SJF 'SRTF' ");
        System.out.println("3. FCAI ");
        System.out.println("4. Priority Scheduling");
        int choice = input.nextInt();
        switch (choice) {
            case 1:
                System.out.print("Enter aging factor for SRTF: ");
                agingFactor = input.nextInt();
                processes = inputProcesses(filePath);
                executionOrder = nonPreemptiveSJF(processes, agingFactor);
                launch(args);
                break;
            case 2:
                System.out.print("Enter context switch time for SRTF: ");
                int contextSwitchTime = input.nextInt();
                System.out.print("Enter aging factor for SRTF: ");
                agingFactor = input.nextInt();
                processes = inputProcesses(filePath);
                SRTF(processes,contextSwitchTime,agingFactor);
                executionOrder = SRTF(processes,contextSwitchTime, agingFactor);
                launch(args);
                break;
            case 3:
                processes = inputProcesses(filePath);
                executionOrder = fcaiScheduling(processes);
                launch(args);
                break;
            case 4:
                processes = inputProcesses(filePath);
                executionOrder = priorityScheduling(processes);
                launch(args);
                break;
            default:
                System.out.println("Invalid choice!");
        }
    }

    public static List<String> nonPreemptiveSJF(List<Process> processes, int agingFactor) {
        processes.sort(Comparator.comparingInt((Process p) -> p.arrivalTime));
        List<Process> finalProcesses = new ArrayList<>();
        List<String> executionOrder = new ArrayList<>();
        Queue<Process> waitingQueue = new LinkedList<>();
        List<Process> readyQueue = new ArrayList<>(processes); // Use a separate list for scheduling


        int startTime = 0, totalWaiting = 0, totalTurnaround = 0;
        while (!readyQueue.isEmpty()) {
            List<Process> readyProcesses = new ArrayList<>();
            for (Process p : readyQueue) {   //put the arrived processes in ready list
                if (p.arrivalTime <= startTime) {
                    readyProcesses.add(p);
                }
            }
            if (readyProcesses.isEmpty()) {     //if there is no pro assign start time to first arrived pro
                startTime = processes.get(0).arrivalTime;
                continue;
            }

            readyProcesses.sort(Comparator.comparingInt(p -> p.burstTime)); //sort ready processes by burst time
            //starvation
            for (Process p : readyProcesses) {
                int waitTime = startTime - p.arrivalTime ;
                if (waitTime > agingFactor) {
                    waitingQueue.add(p);
                }
            }
            Process selectedProcess ;
            readyProcesses.sort(Comparator.comparingInt(p -> p.remainingTime)); //sort ready processes according to remaining time
            if (waitingQueue.isEmpty()) {
                selectedProcess = readyProcesses.get(0);
            }
            else {
                selectedProcess = waitingQueue.poll();
            }

            selectedProcess.waitingTime = startTime - selectedProcess.arrivalTime;
            selectedProcess.turnaroundTime = selectedProcess.waitingTime + selectedProcess.burstTime;
            totalWaiting += selectedProcess.waitingTime;
            totalTurnaround += selectedProcess.turnaroundTime;
            startTime += selectedProcess.burstTime;

            executionOrder.add("P" + selectedProcess.id);

            finalProcesses.add(selectedProcess);
            readyQueue.remove(selectedProcess);
        }
        print(finalProcesses);
        System.out.println("\nExecution Order: " + executionOrder);
        System.out.println("Average Waiting Time = " + (float) totalWaiting / executionOrder.size());
        System.out.println("Average Turnaround Time = " + (float) totalTurnaround / executionOrder.size());
        System.out.println("this is execution order" + executionOrder);

        // calculate averages
        averageWaitingTime = (float) totalWaiting / executionOrder.size();
        averageTurnaroundTime = (float) totalTurnaround / executionOrder.size();
        return executionOrder;
    }

    public static List<String> SRTF(List<Process> processes, int contextSwitchTime, int agingFactor) {
        int n = processes.size();
        processes.sort(Comparator.comparingInt((Process p) -> p.arrivalTime));
        List<Process> finalProcesses = new ArrayList<>();
        List<String> executionOrder = new ArrayList<>();
        Queue<Process> waitingQueue = new LinkedList<>();
        List<Process> readyQueue = new ArrayList<>(processes); // Use a separate list for scheduling


        int startTime = 0, totalWaiting = 0, totalTurnaround = 0;
        Process lastProcess = null;
        while (!readyQueue.isEmpty()) {
            List<Process> readyProcesses = new ArrayList<>();
            for (Process p : readyQueue) {   //put the arrived processes in ready list
                if (p.arrivalTime <= startTime) {
                    readyProcesses.add(p);
                }
            }
            if (readyProcesses.isEmpty()) {     //if there is no pro assign start time to first arrived pro
                startTime = processes.get(0).arrivalTime;
                continue;
            }

            readyProcesses.sort(Comparator.comparingInt(p -> p.remainingTime)); //sort ready processes according to remaining time
            //starvation
            for (Process p : readyProcesses) {
                int waitTime = startTime - p.arrivalTime - (p.burstTime - p.remainingTime);
                if (waitTime > agingFactor) {
                    waitingQueue.add(p);
                }
            }
            Process selectedProcess ;
            readyProcesses.sort(Comparator.comparingInt(p -> p.remainingTime)); //sort ready processes according to remaining time
            if (waitingQueue.isEmpty()) {
                selectedProcess = readyProcesses.get(0);
            }
            else {
                selectedProcess = waitingQueue.poll();
            }
            if (lastProcess != null && lastProcess != selectedProcess) {
                switchTime.add(startTime);
                startTime += contextSwitchTime;
            }

            // Log execution order if switching to a new process
            if (executionOrder.isEmpty() || !executionOrder.get(executionOrder.size() - 1).equals("P" + selectedProcess.id)) {
                executionOrder.add("P" + selectedProcess.id);
            }

            selectedProcess.remainingTime--;
            startTime++;

            if (selectedProcess.remainingTime == 0) {
                selectedProcess.turnaroundTime = startTime - selectedProcess.arrivalTime;
                selectedProcess.waitingTime = selectedProcess.turnaroundTime - selectedProcess.burstTime;

                totalWaiting += selectedProcess.waitingTime;
                totalTurnaround += selectedProcess.turnaroundTime;

                finalProcesses.add(selectedProcess);
                readyQueue.remove(selectedProcess);
            }
            lastProcess = selectedProcess;
        }
        switchTime.add(startTime);
        finalProcesses.sort(Comparator.comparingInt((Process p) -> p.id));
        print(finalProcesses);
        System.out.println("\nExecution Order: " + executionOrder);
        System.out.println("Average Waiting Time = " + (float) totalWaiting / n);
        System.out.println("Average Turnaround Time = " + (float) totalTurnaround / n);
        System.out.println("switch Time : " + switchTime);
        averageWaitingTime = (float) totalWaiting / n;
        averageTurnaroundTime = (float) totalTurnaround / n;
        return executionOrder;
    }

    public static List<String> priorityScheduling(List<Process> processes) {
        processes.sort(Comparator.comparingInt((Process p) -> p.arrivalTime));
        List<Process> finalProcesses = new ArrayList<>();
        List<String> executionOrder = new ArrayList<>();
        List<Process> readyQueue = new ArrayList<>(processes); // Use a separate list for scheduling



        int startTime = 0, totalWaiting = 0, totalTurnaround = 0;
        while (!readyQueue.isEmpty()) {
            List<Process> readyProcesses = new ArrayList<>();
            for (Process p : readyQueue) {   // Add arrived processes to the ready list
                if (p.arrivalTime <= startTime) {
                    readyProcesses.add(p);
                }
            }

            if (readyProcesses.isEmpty()) { // No ready process, advance time to next arrival
                startTime = processes.get(0).arrivalTime;
                continue;
            }

            // Sort ready processes by priority (lower priority value = higher priority)
            readyProcesses.sort(Comparator.comparingInt(p -> p.priority));
            Process selectedProcess = readyProcesses.get(0);

            selectedProcess.waitingTime = startTime - selectedProcess.arrivalTime;
            selectedProcess.turnaroundTime = selectedProcess.waitingTime + selectedProcess.burstTime;
            totalWaiting += selectedProcess.waitingTime;
            totalTurnaround += selectedProcess.turnaroundTime;
            startTime += selectedProcess.burstTime;

            executionOrder.add("P" + selectedProcess.id);

            finalProcesses.add(selectedProcess);
            readyQueue.remove(selectedProcess);
        }

        print(finalProcesses);
        System.out.println("\nExecution Order: " + executionOrder);
        System.out.println("Average Waiting Time = " + (float) totalWaiting / finalProcesses.size());
        System.out.println("Average Turnaround Time = " + (float) totalTurnaround / finalProcesses.size());
        averageTurnaroundTime = (float) totalTurnaround / finalProcesses.size();
        averageWaitingTime = (float) totalWaiting / finalProcesses.size();
        return executionOrder;
    }

    public static List<String> fcaiScheduling(List<Process> processes) {
        // Create a copy of the processes list to prevent changes to the original list
        List<Process> processesCopy = new ArrayList<>();
        for (Process p : processes) {
            // Create a new Process object for each one to avoid modifying the original list
            processesCopy.add(new Process(p.id, p.arrivalTime, p.burstTime, p.priority, p.quantum));
        }

        processesCopy.sort(Comparator.comparingInt(p -> p.arrivalTime)); // Sort processes by arrival time
        int currentTime = 0, totalWaiting = 0, totalTurnaround = 0;
        List<String> executionOrder = new ArrayList<>();
        List<Process> readyQueue = new LinkedList<>();
        List<Process> finalProcesses = new ArrayList<>();

        int n = processesCopy.size();
        double lastArrivalTime = processesCopy.stream().mapToDouble(p -> p.arrivalTime).max().orElse(0);
        double maxBurstTime = processesCopy.stream().mapToDouble(p -> p.burstTime).max().orElse(0);
        double V1 = Math.max(lastArrivalTime / 10.0, 1.0);
        double V2 = Math.max(maxBurstTime / 10.0, 1.0);
        Function<Process, Double> calculateFCAIFactor = process -> ((10 - process.priority) + Math.ceil(process.arrivalTime / V1) + Math.ceil(process.remainingTime / V2));

        // Initialize FCAI Factor and Quantum for each process
        for (Process p : processesCopy) {
            p.fcaiFactor = calculateFCAIFactor.apply(p);
        }

        // Process arrival and add to ready queue
        while (!processesCopy.isEmpty() && processesCopy.get(0).arrivalTime <= currentTime) {
            Process arrivingProcess = processesCopy.remove(0);
            arrivingProcess.fcaiFactor = calculateFCAIFactor.apply(arrivingProcess); // Recalculate FCAI
            if (!readyQueue.contains(arrivingProcess)) {
                readyQueue.add(arrivingProcess);
            }
        }

        while (!processesCopy.isEmpty() || !readyQueue.isEmpty()) {
            while (!processesCopy.isEmpty() && processesCopy.get(0).arrivalTime <= currentTime) {
                Process arrivingProcess = processesCopy.remove(0);
                arrivingProcess.fcaiFactor = calculateFCAIFactor.apply(arrivingProcess);
                if (!readyQueue.contains(arrivingProcess)) {
                    readyQueue.add(arrivingProcess);
                }
            }

            if (!readyQueue.isEmpty()) {
                Process current = readyQueue.remove(0);
                if (executionOrder.isEmpty() || !(executionOrder.get(executionOrder.size() - 1).equals(String.valueOf(current.id)))) {
                    executionOrder.add(String.valueOf(current.id));
                    if (currentTime != 0) switchTime.add(currentTime);
                }

                // Non-preemptive execution for the first 40% of the quantum
                int nonPreemptiveTime = (int) Math.ceil(current.quantum * 0.4);

                // Execute for 40% of the quantum or until the process finishes
                boolean preempted = false;
                int actualExecutionTime = 0;

                // Execute the process, checking for preemption during execution
                while (actualExecutionTime < current.quantum && current.remainingTime > 0) {
                    if (executionOrder.isEmpty() || !executionOrder.get(executionOrder.size() - 1).equals(String.valueOf(current.id))) {
                        executionOrder.add("P" + current.id); // Add to execution order
                    }

                    while (!processesCopy.isEmpty() && processesCopy.get(0).arrivalTime <= currentTime) {
                        Process arrivingProcess = processesCopy.remove(0);
                        arrivingProcess.fcaiFactor = calculateFCAIFactor.apply(arrivingProcess);
                        if (!readyQueue.contains(arrivingProcess)) {
                            readyQueue.add(arrivingProcess);
                        }
                    }

                    if (actualExecutionTime >= nonPreemptiveTime && !readyQueue.isEmpty()) {
                        List<Process> tempQueue = new ArrayList<>(readyQueue);
                        tempQueue.sort(Comparator.comparingDouble(p -> p.fcaiFactor));
                        Process nextProcess = tempQueue.get(0); // Process with the lowest FCAI Factor
                        if (nextProcess.fcaiFactor < current.fcaiFactor) {
                            preempted = true; // Mark as preempted
                            current.quantum += (current.quantum - actualExecutionTime); // Update the remaining quantum
                            readyQueue = tempQueue;
                            readyQueue.remove(current);
                            readyQueue.add(current);  // Add the process back with updated quantum
                            break;
                        }
                    }

                    currentTime++; // Advance the total time by 1 unit
                    current.remainingTime--; // Decrease the remaining burst time
                    actualExecutionTime++; // Track the time used by the process
                }

                if (current.remainingTime == 0 && !readyQueue.isEmpty()) {
                    Process nextProcess = readyQueue.get(0);

                    // Add the process back to the ready queue if it's not finished
                    if (nextProcess.remainingTime > 0 && !readyQueue.contains(nextProcess)) {
                        readyQueue.add(nextProcess);
                    }
                }

                if (current.remainingTime > 0) {
                    if (!preempted) {
                        current.quantum += 2;
                        current.fcaiFactor = calculateFCAIFactor.apply(current);

                        if (!readyQueue.contains(current)) {
                            readyQueue.add(current);
                        }
                    } else {
                        current.fcaiFactor = calculateFCAIFactor.apply(current);

                        if (!readyQueue.contains(current)) {
                            readyQueue.add(current);
                        }
                    }
                } else {
                    current.turnaroundTime = currentTime - current.arrivalTime;
                    current.waitingTime = current.turnaroundTime - current.burstTime;
                    finalProcesses.add(current);
                    totalWaiting += current.waitingTime;
                    totalTurnaround += current.turnaroundTime;
                    System.out.println("\nProcess " + current.id +
                            " Remaining: " + current.remainingTime +
                            " Quantum: " + current.quantum +
                            " FCAI: " + current.fcaiFactor);
                    if (current.waitingTime < 0) {
                        current.waitingTime = 0;
                    }
                }
            } else {
                currentTime++;
            }
        }

        // Add last time
        switchTime.add(currentTime);

        // Execution Order is a List of integers [0, 1, 2, ...]
        List<String> convertedExecutionOrder = new ArrayList<>();

        for (String processId : executionOrder) {
            // Convert each string to the format "P0", "P1", "P2", ...
            String formattedProcessId = "P" + processId;
            convertedExecutionOrder.add(formattedProcessId);
        }

        averageWaitingTime = (float) totalWaiting / n;
        averageTurnaroundTime = (float) totalTurnaround / n;

        finalProcesses.sort(Comparator.comparingInt(p -> p.id));
        print(finalProcesses);
        System.out.println("\nExecution Order: " + convertedExecutionOrder);
        System.out.println("Average Waiting Time = " + (float) totalWaiting / n);
        System.out.println("Average Turnaround Time = " + (float) totalTurnaround / n);
        System.out.println("Context Switch Times: " + switchTime);

        return convertedExecutionOrder;
    }

    public static void print(List<Process> processes) {
        System.out.println("P\tBT\tAT\tWT\tTAT");
        for (Process p : processes) {
            System.out.println("P" + p.id + "\t" + p.burstTime + "\t" + p.arrivalTime + "\t" + p.waitingTime + "\t" + p.turnaroundTime);
        }
    }
}




